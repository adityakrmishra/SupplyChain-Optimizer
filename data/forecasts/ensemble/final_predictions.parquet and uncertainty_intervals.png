# forecasting/ensemble_pipeline.py
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import logging

PROPHET_PATH = Path("../../forecasts/prophet/2023-11-demand_v1.3.csv")
LSTM_PATH = Path("../../forecasts/lstm/2023-11-demand_seq2seq.parquet")
ENSEMBLE_PATH = Path("../../forecasts/ensemble/final_predictions.parquet")
PLOT_PATH = Path("../../forecasts/ensemble/uncertainty_intervals.png")

logger = logging.getLogger(__name__)

def create_ensemble() -> pd.DataFrame:
    """Combine Prophet and LSTM forecasts"""
    prophet = pd.read_csv(PROPHET_PATH)
    lstm = pd.read_parquet(LSTM_PATH)
    
    # Align date formats
    prophet['date'] = pd.to_datetime(prophet['ds'])
    lstm['date'] = pd.to_datetime(lstm['date'])
    
    # Merge forecasts
    combined = pd.merge(
        prophet,
        lstm,
        on='date',
        how='outer'
    ).sort_values('date')
    
    # Create ensemble prediction
    combined['ensemble'] = combined[['yhat', 'predicted_demand']].mean(axis=1)
    
    return combined[['date', 'ensemble', 'yhat_lower', 'yhat_upper']]

def plot_uncertainty(df: pd.DataFrame) -> None:
    """Visualize uncertainty intervals"""
    plt.figure(figsize=(12, 6))
    
    plt.fill_between(
        df['date'], 
        df['yhat_lower'], 
        df['yhat_upper'],
        alpha=0.2,
        label='Uncertainty Interval'
    )
    
    plt.plot(df['date'], df['ensemble'], label='Ensemble Forecast')
    plt.title('Demand Forecast with Uncertainty Intervals')
    plt.xlabel('Date')
    plt.ylabel('Normalized Demand')
    plt.legend()
    plt.tight_layout()
    plt.savefig(PLOT_PATH)
    plt.close()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    ENSEMBLE_PATH.parent.mkdir(parents=True, exist_ok=True)
    
    try:
        # Create and save ensemble
        ensemble_df = create_ensemble()
        ensemble_df.to_parquet(ENSEMBLE_PATH, index=False)
        
        # Generate visualization
        plot_uncertainty(ensemble_df)
        
        logger.info(f"Saved ensemble forecasts to {ENSEMBLE_PATH}")

    except Exception as e:
        logger.error(f"Ensemble pipeline failed: {str(e)}")
