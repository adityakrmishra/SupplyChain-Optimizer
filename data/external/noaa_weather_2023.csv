# data_scripts/download_noaa_weather.py
import os
import requests
import pandas as pd
from datetime import datetime
from pathlib import Path
import logging
from dotenv import load_dotenv

load_dotenv()

NOAA_API_URL = "https://www.ncdc.noaa.gov/cdo-web/api/v2/data"
DATA_PATH = Path("../../data/external/noaa_weather_2023.csv")

logger = logging.getLogger(__name__)

def download_noaa_weather(
    datasetid: str = "GHCND",
    stationid: str = "GHCND:USW00094728",
    start_date: str = "2023-01-01",
    end_date: str = "2023-12-31"
) -> pd.DataFrame:
    """
    Download NOAA weather data with pagination and error handling
    """
    headers = {"token": os.getenv("NOAA_API_KEY")}
    params = {
        "datasetid": datasetid,
        "stationid": stationid,
        "startdate": start_date,
        "enddate": end_date,
        "units": "metric",
        "limit": 1000
    }

    records = []
    offset = 1
    while True:
        try:
            params["offset"] = offset
            response = requests.get(NOAA_API_URL, headers=headers, params=params)
            response.raise_for_status()
            
            data = response.json()
            records.extend(data.get("results", []))
            
            if len(data.get("results", [])) < params["limit"]:
                break
            offset += params["limit"]
            
        except requests.exceptions.RequestException as e:
            logger.error(f"API request failed: {str(e)}")
            break

    df = pd.DataFrame(records)
    if not df.empty:
        df["date"] = pd.to_datetime(df["date"])
        df = df.pivot(index="date", columns="datatype", values="value")
        df.to_csv(DATA_PATH, index=True)
        logger.info(f"Saved NOAA data to {DATA_PATH} with {len(df)} records")
    return df

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    DATA_PATH.parent.mkdir(parents=True, exist_ok=True)
    download_noaa_weather()
