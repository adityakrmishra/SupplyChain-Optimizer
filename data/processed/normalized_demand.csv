# data_scripts/process_demand.py
import pandas as pd
from sklearn.preprocessing import StandardScaler
from pathlib import Path
import joblib
import logging

CLEAN_PATH = Path("../../data/processed/cleaned_shipments.parquet")
NORM_PATH = Path("../../data/processed/normalized_demand.csv")
SCALER_PATH = Path("../../models/scalers/demand_scaler.pkl")

logger = logging.getLogger(__name__)

def normalize_demand(df: pd.DataFrame) -> pd.DataFrame:
    """Normalize demand features for ML"""
    # Temporal features
    df['day_of_week'] = df['shipment_date'].dt.dayofweek
    df['month'] = df['shipment_date'].dt.month
    
    # Select features
    features = ['weight', 'volume', 'day_of_week', 'month', 'unit_price']
    scaler = StandardScaler()
    
    # Fit and transform
    df[features] = scaler.fit_transform(df[features])
    
    # Save scaler
    SCALER_PATH.parent.mkdir(parents=True, exist_ok=True)
    joblib.dump(scaler, SCALER_PATH)
    
    return df

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    
    try:
        clean_df = pd.read_parquet(CLEAN_PATH)
        norm_df = normalize_demand(clean_df)
        norm_df.to_csv(NORM_PATH, index=False)
        logger.info(f"Saved normalized data to {NORM_PATH}")
        
    except Exception as e:
        logger.error(f"Normalization failed: {str(e)}")
